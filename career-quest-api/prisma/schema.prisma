generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  UserId                                    Int              @id @default(autoincrement())
  Username                                  String           @unique
  Email                                     String           @unique
  Password                                  String
  Address                                   String?
  Phone                                     String?
  Gender                                    String?
  CreatedAt                                 DateTime         @default(now())
  UpdatedAt                                 DateTime         @updatedAt
  JobApplications                           JobApplication[]
  Leaderboard                               Leaderboard?
  UserFollower_UserFollower_FromUserFollows UserFollower[]   @relation("UserFollower_FromUser")
  UserFollower_UserFollower_ToUserFollows   UserFollower[]   @relation("UserFollower_ToUser")

  ResetPasswordToken String? @unique

  @@map("User")
}

model UserFollower {
  FromUserId Int
  ToUserId   Int
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime @updatedAt
  FromUser   User     @relation("UserFollower_FromUser", fields: [FromUserId], references: [UserId], onDelete: Cascade)
  ToUser     User     @relation("UserFollower_ToUser", fields: [ToUserId], references: [UserId], onDelete: Cascade)

  @@id([FromUserId, ToUserId])
  @@index([ToUserId], map: "UserFollower_ToUserId_fkey")
  @@map("UserFollower")
}

model Leaderboard {
  LeaderboardId Int      @id @default(autoincrement())
  UserId        Int      @unique
  CurrentScore  Int
  TotalScore    Int
  CreatedAt     DateTime @default(now())
  UpdatedAt     DateTime @updatedAt
  User          User     @relation(fields: [UserId], references: [UserId], onDelete: Cascade)

  @@map("Leaderboard")
}

model JobApplication {
  JobApplicationId Int           @id @default(autoincrement())
  JobSimulationId  Int
  UserId           Int
  CreatedAt        DateTime      @default(now())
  UpdatedAt        DateTime      @updatedAt
  JobSimulation    JobSimulation @relation(fields: [JobSimulationId], references: [JobSimulationId], onDelete: Cascade)
  User             User          @relation(fields: [UserId], references: [UserId], onDelete: Cascade)

  @@index([JobSimulationId], map: "JobApplication_JobSimulationId_fkey")
  @@index([UserId], map: "JobApplication_UserId_fkey")
  @@map("JobApplication")
}

model JobSimulation {
  JobSimulationId     Int                  @id @default(autoincrement())
  JobCategoryId       Int
  JobTitle            String
  JobDescription      String
  CreatedAt           DateTime             @default(now())
  UpdatedAt           DateTime             @updatedAt
  InterviewQuestions  InterviewQuestion[]
  JobApplications     JobApplication[]
  JobCategory         JobCategory          @relation(fields: [JobCategoryId], references: [CategoryId], onDelete: Cascade)
  JobSimulationSkills JobSimulationSkill[]

  @@index([JobCategoryId], map: "JobSimulation_JobCategoryId_fkey")
  @@map("JobSimulation")
}

model JobCategory {
  CategoryId     Int             @id @default(autoincrement())
  CategoryName   String
  CreatedAt      DateTime        @default(now())
  UpdatedAt      DateTime        @updatedAt
  CreatedBy      Int?
  JobSimulations JobSimulation[]
  JobSkills      JobSkill[]

  @@map("JobCategory")
}

model JobSimulationSkill {
  JobSimulationSkillId Int           @id @default(autoincrement())
  JobSimulationId      Int
  JobSkillId           Int
  CreatedAt            DateTime      @default(now())
  UpdatedAt            DateTime      @updatedAt
  JobSimulation        JobSimulation @relation(fields: [JobSimulationId], references: [JobSimulationId], onDelete: Cascade)
  JobSkill             JobSkill      @relation(fields: [JobSkillId], references: [JobSkillId], onDelete: Cascade)

  @@index([JobSimulationId], map: "JobSimulationSkill_JobSimulationId_fkey")
  @@index([JobSkillId], map: "JobSimulationSkill_JobSkillId_fkey")
  @@map("JobSimulationSkill")
}

model JobSkill {
  JobSkillId          Int                  @id @default(autoincrement())
  JobCategoryId       Int
  SkillName           String
  CreatedAt           DateTime             @default(now())
  UpdatedAt           DateTime             @updatedAt
  JobSimulationSkills JobSimulationSkill[]
  JobCategory         JobCategory          @relation(fields: [JobCategoryId], references: [CategoryId], onDelete: Cascade)

  @@index([JobCategoryId], map: "JobSkill_JobCategoryId_fkey")
  @@map("JobSkill")
}

model InterviewQuestion {
  InterviewQuestionId Int               @id @default(autoincrement())
  JobSimulationId     Int
  QuestionText        String
  QuestionType        String
  CreatedAt           DateTime          @default(now())
  UpdatedAt           DateTime          @updatedAt
  InterviewAnswers    InterviewAnswer[]
  JobSimulation       JobSimulation     @relation(fields: [JobSimulationId], references: [JobSimulationId], onDelete: Cascade)

  @@index([JobSimulationId], map: "InterviewQuestion_JobSimulationId_fkey")
  @@map("InterviewQuestion")
}

model InterviewAnswer {
  InterviewAnswerId   Int               @id @default(autoincrement())
  InterviewQuestionId Int
  Answer              String
  IsCorrect           Boolean
  CreatedAt           DateTime          @default(now())
  UpdatedAt           DateTime          @updatedAt
  InterviewQuestion   InterviewQuestion @relation(fields: [InterviewQuestionId], references: [InterviewQuestionId], onDelete: Cascade)

  @@index([InterviewQuestionId], map: "InterviewAnswer_InterviewQuestionId_fkey")
  @@map("InterviewAnswer")
}
